<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>colour = c_black;

globalvar c_magic_white, c_magic_red, c_magic_yellow, c_magic_orange,   c_magic_blue, c_magic_green, c_magic_purple, c_magic_black;

instance_create( 100, 192, ryb_r_obj );
instance_create( 100, 224, ryb_y_obj );
instance_create( 100, 256, ryb_b_obj );

instance_create( 100, 320, rgb_r_obj );
instance_create( 100, 352, rgb_g_obj );
instance_create( 100, 384, rgb_b_obj );

instance_create( 100, 448, hsv_h_obj );
instance_create( 100, 480, hsv_s_obj );
instance_create( 100, 512, hsv_v_obj );

ryb_matrix_list = ds_list_create();
resolution = 20;
rummage_resolution = 20;
tie_rgb_and_ryb = true;
palette = 0;

choose_ryb_palette( palette );

//tie_rgb_to_ryb();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if ( keyboard_check_pressed( vk_enter ) ) {
    tie_rgb_and_ryb = !tie_rgb_and_ryb;
    
    if ( tie_rgb_and_ryb ) {
        
        colour = make_colour_ryb( ryb_r_obj.value * 255, ryb_y_obj.value * 255, ryb_b_obj.value * 255 );
        
        rgb_r_obj.value = colour_get_red(   colour ) / 255;
        rgb_g_obj.value = colour_get_green( colour ) / 255;
        rgb_b_obj.value = colour_get_blue(  colour ) / 255;
        
        hsv_h_obj.value = color_get_hue(        colour ) / 255;
        hsv_s_obj.value = color_get_saturation( colour ) / 255;
        hsv_v_obj.value = color_get_value(      colour ) / 255;
    
    }
    
}

if ( keyboard_check_pressed( vk_left ) ) or ( keyboard_check_pressed( vk_right ) ) {

    if ( keyboard_check_pressed( vk_right ) ) palette = ( palette + 1 ) mod 4;
    if ( keyboard_check_pressed( vk_left ) ) palette = ( palette + 3 ) mod 4;
    
    choose_ryb_palette( palette );
    
    output_obj.colour = make_colour_ryb( ryb_r_obj.value * 255, ryb_y_obj.value * 255, ryb_b_obj.value * 255 );
    
    rgb_r_obj.value = colour_get_red(   colour ) / 255;
    rgb_g_obj.value = colour_get_green( colour ) / 255;
    rgb_b_obj.value = colour_get_blue(  colour ) / 255;
    
    hsv_h_obj.value = color_get_hue(        colour ) / 255;
    hsv_s_obj.value = color_get_saturation( colour ) / 255;
    hsv_v_obj.value = color_get_value(      colour ) / 255;
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
shader_set( shd_ryb_untextured );

var _colour;
_colour = c_magic_white;  shader_set_uniform_f( shader_get_uniform( shd_ryb_untextured, "v_vWhite"  ), colour_get_red( _colour )/255, colour_get_green( _colour )/255, colour_get_blue( _colour )/255 );
_colour = c_magic_yellow; shader_set_uniform_f( shader_get_uniform( shd_ryb_untextured, "v_vYellow" ), colour_get_red( _colour )/255, colour_get_green( _colour )/255, colour_get_blue( _colour )/255 );
_colour = c_magic_red;    shader_set_uniform_f( shader_get_uniform( shd_ryb_untextured, "v_vRed"    ), colour_get_red( _colour )/255, colour_get_green( _colour )/255, colour_get_blue( _colour )/255 );
_colour = c_magic_orange; shader_set_uniform_f( shader_get_uniform( shd_ryb_untextured, "v_vOrange" ), colour_get_red( _colour )/255, colour_get_green( _colour )/255, colour_get_blue( _colour )/255 );

_colour = c_magic_blue;   shader_set_uniform_f( shader_get_uniform( shd_ryb_untextured, "v_vBlue"   ), colour_get_red( _colour )/255, colour_get_green( _colour )/255, colour_get_blue( _colour )/255 );
_colour = c_magic_green;  shader_set_uniform_f( shader_get_uniform( shd_ryb_untextured, "v_vGreen"  ), colour_get_red( _colour )/255, colour_get_green( _colour )/255, colour_get_blue( _colour )/255 );
_colour = c_magic_purple; shader_set_uniform_f( shader_get_uniform( shd_ryb_untextured, "v_vPurple" ), colour_get_red( _colour )/255, colour_get_green( _colour )/255, colour_get_blue( _colour )/255 );
_colour = c_magic_black;  shader_set_uniform_f( shader_get_uniform( shd_ryb_untextured, "v_vBlack"  ), colour_get_red( _colour )/255, colour_get_green( _colour )/255, colour_get_blue( _colour )/255 );

draw_set_color( make_colour_rgb( ryb_r_obj.value * 255, ryb_y_obj.value * 255, ryb_b_obj.value * 255 ) );
draw_rectangle( x, y, x + 64, y + 128, false );
shader_reset();

draw_set_colour( scr_lut_get( global.srf_lut, make_colour_rgb( ryb_r_obj.value*255, ryb_y_obj.value*255, ryb_b_obj.value*255 ) ) );
draw_rectangle( x + 64, y, x + 128, y + 128, false );

draw_set_color( colour );
//draw_rectangle( x + 64, y, x + 128, y + 128, false );
draw_set_color( c_black );
draw_rectangle( x, y, x + 128, y + 128, true );

if ( tie_rgb_and_ryb ) draw_text( x + 135, y, "[enter]:#Locked to RYB palette" ) else draw_text( x + 135, y, "[enter]:#Unlocked" );
draw_text( x + 135, y + 50, "[&lt;-] [-&gt;] RYB palette " + string( palette + 1 ) + ":#" + label );

draw_text( 5, 5, "FPS: " + string( fps ) );

draw_text( 5, y, "Colour space explorer##Uses cubic interpolation#after Gossett &amp; Chen#By Juju/Julian Adams" );
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
