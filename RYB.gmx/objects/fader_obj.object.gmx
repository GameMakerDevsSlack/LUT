<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>fader_spr</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>length = 400;
value = 0;
grab_x = 0;
grab_y = 0;
grabbed = false;
hover = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if ( instance_position( mouse_x, mouse_y, id ) ) {

    hover = true;
    
    if ( mouse_check_button_pressed( mb_left ) ) {
    
        grab_x = x - mouse_x;
        grab_y = y - mouse_y;
        grabbed = true;
    
    }
} else if !( grabbed ) hover = false;

if !( mouse_check_button( mb_left ) ) grabbed = false;

if ( grabbed ) {
    
    x = max( xstart, min( xstart + length, mouse_x + grab_x ) );
    value = ( x - xstart ) / length;
    
    if ( type == 0 ) {
        
        output_obj.colour = make_colour_ryb( ryb_r_obj.value * 255, ryb_y_obj.value * 255, ryb_b_obj.value * 255 );
        
        rgb_r_obj.value = colour_get_red(   output_obj.colour ) / 255;
        rgb_g_obj.value = colour_get_green( output_obj.colour ) / 255;
        rgb_b_obj.value = colour_get_blue(  output_obj.colour ) / 255;
        
        hsv_h_obj.value = color_get_hue(        output_obj.colour ) / 255;
        hsv_s_obj.value = color_get_saturation( output_obj.colour ) / 255;
        hsv_v_obj.value = color_get_value(      output_obj.colour ) / 255;
        
    } else if ( type == 1 ) {
    
        tie_rgb_to_ryb();
        
    } else {
        
        tie_hsv_to_rgb();
        
    }
    
} else x = xstart + value * length;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_line( xstart, ystart, xstart + length, ystart );
draw_sprite( fader_spr, hover + grabbed, x, ystart );
draw_text( xstart + 16 + length, ystart - 10, string( round( value * 255 ) ) );
draw_text( xstart - 32, ystart - 10 , label );
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>16,8</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
