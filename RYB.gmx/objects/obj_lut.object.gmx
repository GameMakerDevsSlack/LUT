<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create

global.srf_lut = surface_create( 4096, 4096 );
surface_set_target( global.srf_lut );

var _shader = shd_ryb_output;
shader_set( _shader );
var _colour;
_colour = c_magic_white;  shader_set_uniform_f( shader_get_uniform( _shader, "v_vWhite"  ), colour_get_red( _colour )/255, colour_get_green( _colour )/255, colour_get_blue( _colour )/255 );
_colour = c_magic_yellow; shader_set_uniform_f( shader_get_uniform( _shader, "v_vYellow" ), colour_get_red( _colour )/255, colour_get_green( _colour )/255, colour_get_blue( _colour )/255 );
_colour = c_magic_red;    shader_set_uniform_f( shader_get_uniform( _shader, "v_vRed"    ), colour_get_red( _colour )/255, colour_get_green( _colour )/255, colour_get_blue( _colour )/255 );
_colour = c_magic_orange; shader_set_uniform_f( shader_get_uniform( _shader, "v_vOrange" ), colour_get_red( _colour )/255, colour_get_green( _colour )/255, colour_get_blue( _colour )/255 );

_colour = c_magic_blue;   shader_set_uniform_f( shader_get_uniform( _shader, "v_vBlue"   ), colour_get_red( _colour )/255, colour_get_green( _colour )/255, colour_get_blue( _colour )/255 );
_colour = c_magic_green;  shader_set_uniform_f( shader_get_uniform( _shader, "v_vGreen"  ), colour_get_red( _colour )/255, colour_get_green( _colour )/255, colour_get_blue( _colour )/255 );
_colour = c_magic_purple; shader_set_uniform_f( shader_get_uniform( _shader, "v_vPurple" ), colour_get_red( _colour )/255, colour_get_green( _colour )/255, colour_get_blue( _colour )/255 );
_colour = c_magic_black;  shader_set_uniform_f( shader_get_uniform( _shader, "v_vBlack"  ), colour_get_red( _colour )/255, colour_get_green( _colour )/255, colour_get_blue( _colour )/255 );

draw_surface( global.srf_lut, 0, 0 );

shader_reset();
surface_reset_target();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
